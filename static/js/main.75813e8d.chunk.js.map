{"version":3,"sources":["helpers/helpers.js","store/store.js","components/scene/Scene.js","components/panel/Panel.js","components/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["getWeather","baseURL","payload","a","fetch","city","method","headers","apiKey","data","json","getTimeFromTimestamp","timestamp","timezone","sunriseUTC","utcDate","moment","utc","unix","timezoneDate","add","format","getEsriWeather","weatherCode","type","cloudCover","initialState","searchArea","lat","long","name","weather","modal","store","createContext","Provider","StateProvider","children","useReducer","state","action","Error","dispatch","value","WebSceneView","globalState","useContext","sceneRef","useRef","useState","sceneView","setView","_searchArea","_baseURL","_apiKey","useEffect","loadModules","css","WebScene","SceneView","Search","scene","portalItem","id","esriWeather","view","container","current","map","qualityProfile","environment","starsEnabled","atmosphereEnabled","lighting","directShadowsEnabled","date","atmosphere","quality","searchWidget","ui","position","on","resultLat","result","center","latitude","resultLong","longitude","resultName","goTo","tilt","zoom","loadWebScene","console","log","fetchWeather","length","style","height","width","ref","Title","Typography","Content","Layout","Panel","className","border","xs","span","sm","md","lg","xl","level","Date","toLocaleString","weekday","display","flexDirection","alignItems","justifyContent","icon","faCalendar","size","marginRight","toLocaleDateString","day","month","year","faMapPin","src","main","description","temp","temp_min","temp_max","feels_like","faSun","sys","sunrise","faMoon","sunset","Header","Main","href","target","faTwitter","gutter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.75813e8d.chunk.js","sourcesContent":["import moment from 'moment';\n\nconst getWeather = async (baseURL, payload) => {\n  const data = await fetch(\n    `${baseURL}?q=${payload.city}&units=metric&mode=json`,\n    {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-rapidapi-key': payload.apiKey,\n        'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com',\n      },\n    }\n  );\n  return data.json();\n};\n\nconst getToday = () => {\n  return new Date().toLocaleString('en-us', { weekday: 'long' });\n};\n\nconst getDate = () => {\n  const date = new Date();\n  return date.toLocaleDateString('en-GB', {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  });\n};\n\nconst getTimeFromTimestamp = (timestamp, timezone) => {\n  // Create a new JavaScript Date object based on the timestamp\n  // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n  var sunriseUTC = timestamp;\n  var utcDate = moment.utc(moment.unix(sunriseUTC));\n  var timezoneDate = moment(utcDate).add(timezone, 'seconds');\n  return moment(timezoneDate).format('HH:mm:ss');\n};\n\nconst getEsriWeather = (weatherCode) => {\n  switch (weatherCode) {\n    case 200:\n      return {\n        type: 'rainy',\n        cloudCover: 0.1, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 201:\n      return {\n        type: 'rainy',\n        cloudCover: 0.5, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 202:\n      return {\n        type: 'rainy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 210:\n      return {\n        type: 'rainy',\n        cloudCover: 0.2, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 211:\n      return {\n        type: 'rainy',\n        cloudCover: 0.6, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 212:\n      return {\n        type: 'rainy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 230:\n      return {\n        type: 'rainy',\n        cloudCover: 0.3, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 231:\n      return {\n        type: 'rainy',\n        cloudCover: 0.7, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 232:\n      return {\n        type: 'rainy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 300:\n      return {\n        type: 'rainy',\n        cloudCover: 0.5, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 301:\n      return {\n        type: 'rainy',\n        cloudCover: 0.5, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 302:\n      return {\n        type: 'rainy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 310:\n      return {\n        type: 'rainy',\n        cloudCover: 0.2, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 311:\n      return {\n        type: 'rainy',\n        cloudCover: 0.4, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 312:\n      return {\n        type: 'rainy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 313:\n      return {\n        type: 'rainy',\n        cloudCover: 0.7, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 314:\n      return {\n        type: 'rainy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 321:\n      return {\n        type: 'rainy',\n        cloudCover: 0.5, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 500:\n      return {\n        type: 'rainy',\n        cloudCover: 0.1, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 501:\n      return {\n        type: 'rainy',\n        cloudCover: 0.2, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 502:\n      return {\n        type: 'rainy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 503:\n      return {\n        type: 'rainy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 504:\n      return {\n        type: 'rainy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 511:\n      return {\n        type: 'rainy',\n        cloudCover: 0.8, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 520:\n      return {\n        type: 'rainy',\n        cloudCover: 0.2, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 521:\n      return {\n        type: 'rainy',\n        cloudCover: 0.4, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 522:\n      return {\n        type: 'rainy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 531:\n      return {\n        type: 'rainy',\n        cloudCover: 0.7, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 600:\n      return {\n        type: 'foggy',\n        cloudCover: 0.2, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 601:\n      return {\n        type: 'foggy',\n        cloudCover: 0.5, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 602:\n      return {\n        type: 'foggy',\n        cloudCover: 0.8, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 611:\n      return {\n        type: 'foggy',\n        cloudCover: 0.3, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 612:\n      return {\n        type: 'foggy',\n        cloudCover: 0.2, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 613:\n      return {\n        type: 'foggy',\n        cloudCover: 0.2, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 615:\n      return {\n        type: 'foggy',\n        cloudCover: 0.1, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 616:\n      return {\n        type: 'foggy',\n        cloudCover: 0.2, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 620:\n      return {\n        type: 'foggy',\n        cloudCover: 0.2, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 621:\n      return {\n        type: 'foggy',\n        cloudCover: 0.4, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 622:\n      return {\n        type: 'foggy',\n        cloudCover: 0.7, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 701:\n    case 711:\n    case 721:\n    case 731:\n    case 741:\n    case 751:\n    case 761:\n    case 762:\n    case 771:\n    case 781:\n      return {\n        type: 'foggy',\n        cloudCover: 0.8, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 800:\n      return {\n        type: 'sunny',\n        cloudCover: 0.0, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 801:\n      return {\n        type: 'sunny',\n        cloudCover: 0.3, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 802:\n      return {\n        type: 'cloudy',\n        cloudCover: 0.4, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 803:\n      return {\n        type: 'cloudy',\n        cloudCover: 0.7, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    case 804:\n      return {\n        type: 'cloudy',\n        cloudCover: 0.9, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n    default:\n      return {\n        type: 'sunny',\n        cloudCover: 0.5, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n      };\n  }\n};\n\nexport { getWeather, getToday, getDate, getTimeFromTimestamp, getEsriWeather };\n","// store.js\nimport React, { createContext, useReducer } from 'react';\n\nconst initialState = {\n  data: [],\n  searchArea: {\n    lat: '48.13',\n    long: '1.57',\n    name: 'Munich',\n  },\n  weather: {\n    type: 'sunny',\n    cloudCover: 0.5, // autocasts as new CloudyWeather({ cloudCover: 0.4 })\n  },\n  modal: false,\n  baseURL: 'https://community-open-weather-map.p.rapidapi.com/weather',\n  apiKey: '3af5bcce6bmsha951405d9ae93adp1c1f27jsndf942220638c',\n};\nconst store = createContext(initialState);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case 'SET_DATA':\n        return { ...state, data: action.data };\n      case 'SET_SEARCH_AREA':\n        return { ...state, searchArea: action.data };\n      case 'SET_MODAL':\n        return { ...state, modal: action.data };\n      case 'SET_WEATHER':\n        return { ...state, weather: action.data };\n      default:\n        throw new Error();\n    }\n  }, initialState);\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","import React, { useEffect, useRef, useContext, useState } from 'react';\nimport { loadModules } from 'esri-loader';\nimport { getWeather, getEsriWeather } from '../../helpers/helpers';\nimport { store } from '../../store/store';\n\nexport const WebSceneView = () => {\n  const globalState = useContext(store);\n  const { dispatch } = globalState;\n\n  const sceneRef = useRef();\n  const [sceneView, setView] = useState(null);\n\n  const _searchArea = globalState.state.searchArea;\n  const _baseURL = globalState.state.baseURL;\n  const _apiKey = globalState.state.apiKey;\n\n  useEffect(() => {\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    async function loadWebScene() {\n      const [WebScene, SceneView, Search] = await loadModules(\n        ['esri/WebScene', 'esri/views/SceneView', 'esri/widgets/Search'],\n        {\n          css: true,\n        }\n      );\n      const scene = new WebScene({\n        portalItem: {\n          // autocasts as new PortalItem()\n          id: '3595a9c3957f4178b3c2215d23563702',\n        },\n      });\n\n      const weather = await getWeather(_baseURL, {\n        city: _searchArea.name,\n        apiKey: _apiKey,\n      });\n      const esriWeather = getEsriWeather(weather?.weather[0]?.id);\n      // load the map view at the ref's DOM node\n      const view = new SceneView({\n        container: sceneRef.current,\n        map: scene,\n        qualityProfile: 'high',\n        environment: {\n          starsEnabled: true,\n          atmosphereEnabled: true,\n          lighting: {\n            directShadowsEnabled: true,\n            date: 'Mon Apr 06 2022 17:19:18 GMT+0200 (Central European Summer Time)',\n          },\n          atmosphere: {\n            quality: 'high',\n          },\n          weather: esriWeather,\n        },\n      });\n\n      setView(view);\n\n      const searchWidget = new Search({\n        view: view,\n      });\n\n      // Add the search widget to the top right corner of the view\n      view.ui.add(searchWidget, {\n        position: 'top-right',\n      });\n\n      searchWidget.on('select-result', (data) => {\n        const resultLat = data?.result?.center?.latitude;\n        const resultLong = data?.result?.center?.longitude;\n        let resultName = data?.result?.name;\n\n        dispatch({\n          type: 'SET_SEARCH_AREA',\n          data: {\n            lat: resultLat,\n            long: resultLong,\n            name: resultName,\n          },\n        });\n\n        view.goTo({\n          center: [resultLat, resultLong],\n          tilt: 85,\n          zoom: 15,\n        });\n      });\n\n      return () => {\n        if (view) {\n          // destroy the map view\n          view.container = null;\n        }\n      };\n    }\n    loadWebScene();\n  }, []);\n\n  useEffect(() => {\n    async function fetchWeather() {\n      try {\n        const weather = await getWeather(_baseURL, {\n          city: _searchArea.name,\n          apiKey: _apiKey,\n        });\n        dispatch({ type: 'SET_DATA', data: [weather] });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n    fetchWeather();\n  }, [globalState.state.searchArea]);\n\n  useEffect(() => {\n    if (globalState.state.data.length > 0) {\n      const weather = getEsriWeather(globalState.state.data[0].weather[0].id);\n\n      dispatch({\n        type: 'SET_WEATHER',\n        data: weather,\n      });\n\n      if (sceneView?.environment) {\n        sceneView.environment.weather = weather;\n      }\n    }\n  }, [globalState.state.data]);\n\n  return <div style={{ height: '100%', width: '100%' }} ref={sceneRef} />;\n};\n","import React, { useContext } from 'react';\nimport { Layout, Card, Typography, Row, Col } from 'antd';\nimport { store } from '../../store/store';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faSun,\n  faMoon,\n  faMapPin,\n  faCalendar,\n} from '@fortawesome/free-solid-svg-icons';\nimport './Panel.css';\nimport { getToday, getDate, getTimeFromTimestamp } from '../../helpers/helpers';\n\nconst { Title } = Typography;\nconst { Content } = Layout;\n\nexport const Panel = () => {\n  // console.log(\"Render Panel\");\n  const globalState = useContext(store);\n\n  return (\n    <Content>\n      <Card className=\"cardStyle\" style={{ border: '0' }}>\n        <article className=\"box weather\">\n          <Row>\n            <Col\n              xs={{ span: 12 }}\n              sm={{ span: 12 }}\n              md={{ span: 12 }}\n              lg={{ span: 24 }}\n              xl={{ span: 24 }}\n            >\n              <Title className=\"textColor\" level={3}>\n                {getToday()}\n              </Title>\n              <span\n                style={{\n                  display: 'flex',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                }}\n              >\n                <FontAwesomeIcon\n                  className=\"textColor icons\"\n                  icon={faCalendar}\n                  size=\"2x\"\n                  style={{ marginRight: '0.5rem' }}\n                />\n                <Title className=\"textColor\" level={5}>\n                  {getDate()}\n                </Title>\n              </span>\n\n              <span\n                style={{\n                  display: 'flex',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                }}\n              >\n                <FontAwesomeIcon\n                  className=\"textColor icons\"\n                  icon={faMapPin}\n                  size=\"2x\"\n                  style={{ marginRight: '0.5rem' }}\n                />\n                <h1 className=\"textColor\">{globalState.state.data[0].name}</h1>\n              </span>\n\n              <div className=\"icon bubble black\">\n                <div className=\"spin\">\n                  <img\n                    src={`http://openweathermap.org/img/wn/${globalState.state.data[0].weather[0].icon}@2x.png`}\n                  />\n                </div>\n              </div>\n\n              <Title className=\"textColor\" level={1}>\n                {globalState.state.data[0].weather[0].main}\n              </Title>\n              <Title className=\"textColor\" level={3}>\n                {globalState.state.data[0].weather[0].description}\n              </Title>\n              <span className=\"temp textColor\">\n                {globalState.state.data[0].main.temp}&deg;\n              </span>\n            </Col>\n            <Col\n              xs={{ span: 12 }}\n              sm={{ span: 12 }}\n              md={{ span: 12 }}\n              lg={{ span: 24 }}\n              xl={{ span: 24 }}\n            >\n              <span className=\"high-low textColor \">\n                {globalState.state.data[0].main.temp_min}&deg;/{' '}\n                {globalState.state.data[0].main.temp_max}&deg;\n              </span>\n\n              <div className=\"textColor descriptionText\">\n                Feels like {globalState.state.data[0].main.feels_like}&deg;\n              </div>\n              <div className=\"descriptionText\">\n                <FontAwesomeIcon\n                  className=\"textColor icons\"\n                  icon={faSun}\n                  size=\"2x\"\n                  style={{ marginRight: '0.5rem' }}\n                />\n                <span className=\"textColor sunriseSunset\">\n                  {getTimeFromTimestamp(\n                    globalState.state.data[0].sys.sunrise,\n                    globalState.state.data[0].timezone\n                  )}\n                </span>\n              </div>\n              <div>\n                <FontAwesomeIcon\n                  className=\"textColor icons\"\n                  icon={faMoon}\n                  size=\"2x\"\n                  style={{ marginRight: '0.5rem' }}\n                />\n                <span className=\"textColor sunriseSunset\">\n                  {getTimeFromTimestamp(\n                    globalState.state.data[0].sys.sunset,\n                    globalState.state.data[0].timezone\n                  )}\n                </span>\n              </div>\n            </Col>\n          </Row>\n        </article>\n      </Card>\n    </Content>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Layout, Row, Col } from 'antd';\n\nimport { WebSceneView } from '../scene/Scene';\nimport { Panel } from '../panel/Panel';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { store } from '../../store/store';\nimport './Main.css';\n\nconst { Header, Content } = Layout;\n\nfunction Main() {\n  const globalState = useContext(store);\n  const { dispatch } = globalState;\n  return (\n    <Layout>\n      <Header className=\"headerStyle\">\n        <span className=\"iconSpan\">\n          <div className=\"weatherIcon\">\n            <div className=\"sunny\">\n              <div className=\"inner\"></div>\n            </div>\n          </div>\n        </span>\n        <span className=\"title\">3D Weather App</span>\n        <span className=\"iconSpan\">\n          <div className=\"weatherIcon\">\n            <div className=\"tstorms\">\n              <div className=\"inner\"></div>\n            </div>\n          </div>\n        </span>\n        <span className=\"headerRightSide\">\n          <span className=\"iconSpan\">\n            <div className=\"weatherIcon\">\n              <div className=\"cloudy\">\n                <div className=\"inner\"></div>\n              </div>\n            </div>\n          </span>\n          <span>\n            <a\n              href=\"https://twitter.com/ialixandroae\"\n              target=\"_blank\"\n              className=\"twitterTag\"\n            >\n              <FontAwesomeIcon icon={faTwitter} size=\"1x\" />\n              ialixandroae\n            </a>\n            <span className=\"iconSpanRight\">\n              <div className=\"weatherIcon\">\n                <div className=\"snow\">\n                  <div className=\"inner\"></div>\n                </div>\n              </div>\n            </span>\n          </span>\n        </span>\n      </Header>\n      <Layout>\n        <Content>\n          <Row gutter={[0, 0]}>\n            <Col\n              xs={{ span: 24 }}\n              sm={{ span: 24 }}\n              md={{ span: 24 }}\n              lg={{ span: 20 }}\n              xl={{ span: 20 }}\n              className=\"leftCol\"\n            >\n              <WebSceneView />\n            </Col>\n            <Col\n              xs={{ span: 24 }}\n              sm={{ span: 24 }}\n              md={{ span: 24 }}\n              lg={{ span: 4 }}\n              xl={{ span: 4 }}\n              className=\"rightCol\"\n            >\n              <Row className=\"rightCol\">\n                {globalState.state.data.length === 0 ? <div></div> : <Panel />}\n              </Row>\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"./components/main/Main\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { StateProvider } from \"./store/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}